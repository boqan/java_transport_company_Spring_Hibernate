package com.batanasov.javaTransportCompanyProjectSPRING.repository;

import com.batanasov.javaTransportCompanyProjectSPRING.DTO.EmployeeContractCountDTO;
import com.batanasov.javaTransportCompanyProjectSPRING.DTO.EmployeeDTO;
import com.batanasov.javaTransportCompanyProjectSPRING.DTO.EmployeeRevenueDTO;
import com.batanasov.javaTransportCompanyProjectSPRING.Enums.Qualification;
import com.batanasov.javaTransportCompanyProjectSPRING.entity.TransportCompany;
import org.springframework.data.jpa.repository.JpaRepository;
import com.batanasov.javaTransportCompanyProjectSPRING.entity.Employee;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.math.BigDecimal;
import java.util.List;

public interface EmployeeRepository extends JpaRepository<Employee, Long> {

    @Query("SELECT new com.batanasov.javaTransportCompanyProjectSPRING.DTO.EmployeeDTO(e.employeeId, e.name, e.position, e.salary, e.qualification, e.company.companyId) " +
            "FROM Employee e WHERE e.qualification = :qualification AND e.salary > :salary")
    List<EmployeeDTO> findByQualificationAndSalaryGreaterThan(@Param("qualification") Qualification qualification, @Param("salary") BigDecimal salary);
    @Query("SELECT new com.batanasov.javaTransportCompanyProjectSPRING.DTO.EmployeeDTO(e.employeeId, e.name, e.position, e.salary, e.qualification, e.company.companyId) " +
            "FROM Employee e WHERE e.position = :position AND e.salary < :salary")
    List<EmployeeDTO> findByPositionAndSalaryLessThan(@Param("position") String position, @Param("salary") BigDecimal salary);

    @Query("SELECT new com.batanasov.javaTransportCompanyProjectSPRING.DTO.EmployeeDTO(e.employeeId, e.name, e.position, e.salary, e.qualification, e.company.companyId) " +
            "FROM Employee e WHERE e.qualification = :qualification AND e.salary = :salary")
    List<EmployeeDTO> findByQualificationAndSalary(@Param("qualification") Qualification qualification, @Param("salary") BigDecimal salary);

    @Query("SELECT new com.batanasov.javaTransportCompanyProjectSPRING.DTO.EmployeeDTO(e.employeeId, e.name, e.position, e.salary, e.qualification, e.company.companyId) " +
            "FROM Employee e WHERE e.qualification = :qualification")
    List<EmployeeDTO> findByQualification(@Param("qualification") Qualification qualification);



    @Query("SELECT new com.batanasov.javaTransportCompanyProjectSPRING.DTO.EmployeeDTO(e.employeeId, e.name, e.position, e.salary, e.qualification, e.company.companyId) " +
            "FROM Employee e WHERE e.salary BETWEEN :minSalary AND :maxSalary")
    List<EmployeeDTO> findBySalaryBetween(@Param("minSalary") BigDecimal minSalary, @Param("maxSalary") BigDecimal maxSalary);

    @Query("SELECT new com.batanasov.javaTransportCompanyProjectSPRING.DTO.EmployeeDTO(e.employeeId, e.name, e.position, e.salary, e.qualification, e.company.companyId) " +
            "FROM Employee e WHERE e.position = :position")
    List<EmployeeDTO> findByPosition(@Param("position") String position);

    @Query("SELECT new com.batanasov.javaTransportCompanyProjectSPRING.DTO.EmployeeDTO(e.employeeId, e.name, e.position, e.salary, e.qualification, e.company.companyId) " +
            "FROM Employee e WHERE e.company = :company")
    List<EmployeeDTO> findByCompany(@Param("company") TransportCompany company);

    @Query("SELECT new com.batanasov.javaTransportCompanyProjectSPRING.DTO.EmployeeDTO(e.employeeId, e.name, e.position, e.salary, e.qualification, e.company.companyId) " +
            "FROM Employee e ORDER BY e.name ASC")
    List<EmployeeDTO> findAllByOrderByNameAsc();

    @Query("SELECT new com.batanasov.javaTransportCompanyProjectSPRING.DTO.EmployeeContractCountDTO(e, COUNT(c)) FROM Employee e JOIN e.transportContracts c GROUP BY e")
    List<EmployeeContractCountDTO> findEmployeeContractCounts();

    // revenue generated by each employee through the contracts they are associated with
    @Query("SELECT new com.batanasov.javaTransportCompanyProjectSPRING.DTO.EmployeeRevenueDTO(e.employeeId, e.name, SUM(c.price)) FROM Employee e JOIN e.transportContracts c GROUP BY e")
    List<EmployeeRevenueDTO> sumRevenueByEmployee();
}
